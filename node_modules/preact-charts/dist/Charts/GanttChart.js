import { h, Component } from 'preact';
import { Axis } from '../Components/Axis';
import { scaleBand, scaleTime } from 'd3-scale';
import { min, max } from 'd3-array';
import { pluck } from '../Utils/pluck';
import { ResizeObserver } from 'resize-observer';
export class GanttChart extends Component {
    constructor(props) {
        super(props);
        this.handleBarClick = (bar) => {
            this.setState({ clickedBar: bar.idx });
            this.props.onBarClick(bar);
        };
        const innerWidth = props.width - props.margin.left - props.margin.right;
        const innerHeight = props.height - props.margin.top - props.margin.bottom;
        this.state = {
            width: props.width,
            height: props.height,
            innerWidth,
            innerHeight,
            clickedBar: null,
        };
    }
    render(props, { height, width, innerHeight, innerWidth }) {
        const xDomain = props.extent.length > 0 ?
            props.extent :
            [min(props.data, (d) => d.start), max(props.data, (d) => d.end)];
        const xScale = scaleTime()
            .range([0, innerWidth])
            .domain(xDomain);
        const yScale = scaleBand()
            .rangeRound([innerHeight, 0])
            .paddingInner(0.1);
        yScale.domain(pluck(props.data, props.y));
        return (h("svg", { ref: (svg) => this.chartSVG = svg, class: name, height: height, width: width },
            h("g", { transform: `translate(${props.margin.left}, ${props.margin.top})` },
                h("clipPath", { id: `${props.name}_cp` },
                    h("rect", { width: innerWidth, height: innerHeight })),
                h(Axis, { height: innerHeight, axisType: 'x', scale: xScale, rotateScaleText: false, grid: true }),
                h(Axis, { width: innerWidth, axisType: 'y', scale: yScale, ticks: props.ticks }),
                props.data.map((bar) => {
                    const barFill = bar.idx === this.state.clickedBar ?
                        'orangered' :
                        this.props.highLightBars.some((hl) => hl.includes(bar[this.props.barHighlightRef])) ?
                            'lawngreen' :
                            'steelblue';
                    return h("rect", { stroke: 'currentColor', "clip-path": `url(#${props.name}_cp)`, height: yScale.bandwidth(), y: yScale(bar[this.props.y]), x: xScale(bar.start), width: xScale(bar.end) - xScale(bar.start), onClick: () => this.handleBarClick(bar), fill: barFill });
                }))));
    }
    componentDidMount() {
        this.resizeChart();
        this.resizeOb = new ResizeObserver((entries) => {
            for (const entry of entries) {
                const cr = entry.contentRect;
                const width = cr.width;
                const height = cr.height;
                if (width !== this.state.width || height !== this.state.height) {
                    this.resizeChart();
                }
            }
        });
        this.resizeOb.observe(this.chartSVG.parentElement);
    }
    componentWillUnmount() {
        this.resizeOb.disconnect();
    }
    resizeChart() {
        const parent = this.chartSVG.parentElement;
        const cr = parent.getBoundingClientRect();
        const width = cr.width;
        const height = cr.height;
        const innerWidth = width - this.props.margin.left - this.props.margin.right;
        const innerHeight = height - this.props.margin.top - this.props.margin.bottom;
        this.setState({ innerWidth, innerHeight, height, width });
    }
}
GanttChart.defaultProps = {
    height: 800,
    width: 600,
    margin: {
        top: 25,
        right: 45,
        bottom: 50,
        left: 150,
    },
    ticks: 6,
    extent: [],
    onBarClick: () => { },
    highLightBars: [],
    barHighlightRef: '',
};
;
//# sourceMappingURL=GanttChart.js.map