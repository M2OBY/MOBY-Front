import { h, Component } from 'preact';
import { scaleLinear, scaleTime } from 'd3-scale';
import { min, max } from 'd3-array';
import { ResizeObserver } from 'resize-observer';
import { Axis } from '../Components/Axis';
import { area } from '../Utils/area';
import { BrushX } from '../Components/BrushX';
export class RangeChart extends Component {
    constructor(props) {
        super(props);
        this.componentDidMount = () => {
            this.resizeChart();
            this.resizeOb = new ResizeObserver((entries) => {
                for (const entry of entries) {
                    const cr = entry.contentRect;
                    const width = cr.width;
                    const height = cr.height;
                    if (width !== this.state.width || height !== this.state.height) {
                        this.resizeChart();
                    }
                }
            });
            this.resizeOb.observe(this.chartSVG.parentElement);
        };
        this.handleBrush = (extent) => {
            const selection = extent || [0, this.state.innerWidth];
            const inverted = [this.xScale.invert(selection[0]), this.xScale.invert(selection[1])];
            this.setState({ extent: inverted });
            this.props.onBrush(inverted);
        };
        const innerWidth = props.width - props.margin.left - props.margin.right;
        const innerHeight = props.height - props.margin.top - props.margin.bottom;
        this.state = {
            width: props.width,
            height: props.height,
            innerWidth,
            innerHeight,
        };
    }
    render(props, { width, height, innerWidth, innerHeight }) {
        this.xScale = scaleTime()
            .range([0, innerWidth])
            .domain([min(props.data, (d) => d.timestamp), max(props.data, (d) => d.timestamp)]);
        const yScale = scaleLinear()
            .range([innerHeight, 0])
            .domain([min(props.data, (d) => +d[props.y]), max(props.data, (d) => +d[props.y])]);
        const areaFunc = area({
            x: (d) => this.xScale(d.timestamp),
            y: (d) => yScale(+d[props.y]),
            y0: innerHeight,
        });
        return (h("svg", { ref: (svg) => this.chartSVG = svg, class: props.name, height: height, width: width },
            h("g", { transform: `translate(${props.margin.left}, ${props.margin.top})` },
                h(Axis, { height: innerHeight, axisType: 'x', scale: this.xScale }),
                h(Axis, { width: innerWidth, axisType: 'y', scale: yScale, grid: true, ticks: 0 }),
                h("path", { d: areaFunc(props.data), strokeLinecap: 'round', stroke: props.lineColour, fill: props.fillColour, "stroke-width": '1px' }),
                h(BrushX, { width: innerWidth, height: innerHeight, margin: props.margin, onBrushEnd: this.handleBrush }))));
    }
    componentWillUnmount() {
        this.resizeOb.disconnect();
    }
    resizeChart() {
        const parent = this.chartSVG.parentElement;
        const cr = parent.getBoundingClientRect();
        const width = cr.width;
        const height = cr.height;
        const innerWidth = width - this.props.margin.left - this.props.margin.right;
        const innerHeight = height - this.props.margin.top - this.props.margin.bottom;
        this.xScale.range([0, innerWidth]);
        this.setState({ innerWidth, innerHeight, height, width });
    }
}
RangeChart.defaultProps = {
    height: 200,
    width: 1000,
    margin: {
        top: 25,
        right: 25,
        bottom: 75,
        left: 75,
    },
    lineColour: 'steelblue',
    fillColour: 'steelblue',
    onBrush: () => { },
    brushColour: 'darkgoldenrod',
};
//# sourceMappingURL=RangeChart.js.map