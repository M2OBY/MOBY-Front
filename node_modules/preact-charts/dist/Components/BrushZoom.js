import { h, Component } from 'preact';
export class BrushZoom extends Component {
    constructor(props) {
        super(props);
        this.handleMouseDown = (evt) => {
            evt.preventDefault();
            evt.stopPropagation();
            evt.stopImmediatePropagation();
            const xLoc = evt.offsetX - this.props.margin.left;
            const yLoc = evt.offsetY - this.props.margin.top;
            const extent = [[xLoc, yLoc], [xLoc, yLoc]];
            this.setState({ mouseDown: true, extent });
        };
        this.handleMouseMove = (evt) => {
            if (!this.state.mouseDown)
                return;
            const xLoc = evt.offsetX - this.props.margin.left;
            const yLoc = evt.offsetY - this.props.margin.top;
            const extent = [...this.state.extent]; // extent [[sX, sY], [eX, eY]]
            if (xLoc < extent[0][0]) {
                extent[0][0] = xLoc;
            }
            else if (xLoc > extent[0][0]) {
                extent[1][0] = xLoc;
            }
            if (yLoc < extent[1][1]) {
                extent[1][1] = yLoc;
            }
            else if (yLoc > extent[1][1]) {
                extent[0][1] = yLoc;
            }
            this.setState({ extent });
        };
        this.handleMouseUp = (evt) => {
            evt.preventDefault();
            evt.stopPropagation();
            evt.stopImmediatePropagation();
            if (!this.state.mouseDown)
                return;
            this.props.onBrush(this.state.extent);
            this.setState({ mouseDown: false, extent: null });
        };
        this.handleDblClick = () => {
            this.props.onBrush(null);
            this.setState({ mouseDown: false, extent: null });
        };
        this.state = {
            extent: null,
            mouseDown: false,
        };
    }
    render({ height, width }, { extent, mouseDown }) {
        return (h("g", { onMouseMove: this.handleMouseMove, onMouseUp: this.handleMouseUp, onDblClick: this.handleDblClick, onMouseDown: this.handleMouseDown },
            h("rect", { x: '0', y: '0', height: height, width: width, fill: 'none', "pointer-events": 'all', cursor: 'crosshair' }),
            (extent !== null && mouseDown) &&
                h("rect", { x: extent[0][0], y: extent[1][1], width: extent[1][0] - extent[0][0], height: extent[0][1] - extent[1][1], fill: 'rgba(100,100,100,0.35)', stroke: 'currentColor', onMouseDown: () => this.setState({ mouseDown: true, }) })));
    }
}
BrushZoom.defaultProps = {
    onBrush: () => { },
};
//# sourceMappingURL=BrushZoom.js.map