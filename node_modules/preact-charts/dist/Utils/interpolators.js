export const linearInterpolation = (point, x, y) => `L${x(point)},${y(point)}`;
export const stepMidInterpolation = (point, x, y, i, a) => {
    const past = x(a[i - 1]) || x(point);
    const midPoint = past + ((x(point) - past) / 2);
    return `H${midPoint} V${y(point)} H${x(point)}`;
};
export const stepAfterInterpolation = (point, x, y) => {
    return `V${y(point)} H${x(point)}`;
};
export const stepBeforeInterpolation = (point, x, y) => `H${x(point)} V${y(point)}`;
export const bezierCurve = (pointA, pointB) => {
    const lengthX = pointB[0] - pointA[0];
    const lengthY = pointB[1] - pointA[1];
    return {
        length: Math.sqrt(Math.pow(lengthX, 2) + Math.pow(lengthY, 2)),
        angle: Math.atan2(lengthY, lengthX)
    };
};
export const controlPoint = (x, y, current, previous, next, reverse) => {
    const p = previous || current;
    const n = next || current;
    const smoothing = 0.15;
    const o = bezierCurve([x(p), y(p)], [x(n), y(n)]);
    const angle = o.angle + (reverse ? Math.PI : 0);
    const length = o.length * smoothing;
    const xPos = x(current) + Math.cos(angle) * length;
    const yPos = y(current) + Math.sin(angle) * length;
    return [xPos, yPos];
};
export const bezierInterpolation = (point, x, y, i, a) => {
    const [cpsX, cpsY] = controlPoint(x, y, a[i - 1], a[i - 2], point);
    const [cpeX, cpeY] = controlPoint(x, y, point, a[i - 1], a[i + 1], true);
    return `C ${cpsX},${cpsY} ${cpeX},${cpeY} ${x(point)},${y(point)}`;
};
//# sourceMappingURL=interpolators.js.map